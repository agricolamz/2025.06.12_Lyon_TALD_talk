---
format: html
editor_options: 
  chunk_output_type: console
fig-height: 7
fig-width: 9
echo: false
message: false
---

```{r}
#| include: false

library(tidyverse)
library(widyr)
library(phangorn)
```


```{r}
list.files("/home/agricolamz/work/databases/TALD/data/orig_table", 
                 full.names = TRUE) |> 
  map(function(i){
  read_tsv(i, show_col_types = FALSE) |> 
    mutate(source = str_remove(i, "/home/agricolamz/work/databases/TALD/data/orig_table/"),
           source = str_remove(source, "\\.tsv")) |> 
    select(language, idiom, type, source, starts_with("value")) |> 
    mutate_all(as.character)
}) |> 
  list_rbind() |> 
  mutate(value1 = str_c(source, " ||| ", value1, " ||| ", value1_name),
         value2 = str_c(source, " ||| ", value2, " ||| ", value2_name),
         value3 = str_c(source, " ||| ", value3, " ||| ", value3_name),
         value4 = str_c(source, " ||| ", value4, " ||| ", value4_name),
         value5 = str_c(source, " ||| ", value5, " ||| ", value5_name)) |> 
  select(language, idiom, type, value1, value2, value3, value4, value5)  |> 
  pivot_longer(names_to = "value_id", values_to = "value", -c(language, idiom, type)) |> 
  na.omit() |> 
  separate_wider_delim(value, names = c("source", "value", "value_name"), delim = " ||| ") |> 
  select(-value_id) |> 
  distinct() ->
  df

df |> 
  count(language, idiom, value_name) |> 
  count(language, idiom) |> 
  mutate(merged = str_c(idiom, " ", language),
         merged = fct_reorder(merged, n)) |> 
  filter(n > 20) |> 
  distinct(language, idiom) |> 
  mutate(languageuage_sample = TRUE) -> 
  language_idiom_sample

df |> 
  left_join(language_idiom_sample) |> 
  filter(!is.na(languageuage_sample)) |> 
  select(-languageuage_sample, -type, -source) |> 
  group_by(language, idiom, value_name) |> 
  slice_sample(n = 1) |> 
  ungroup() |> 
  count(value_name, sort = TRUE) |> 
  filter(n > 10)  |> 
  pull(value_name) ->
  features_sample

read_tsv("/home/agricolamz/work/databases/TALD/data/tald_villages.csv") |>
  distinct(default_level, aff_col) |> 
  rename(language = default_level) |> 
  mutate(language = case_when(language == "Southwestern Dargwa" ~ "Tanti",
                              language == "North-Central Dargwa" ~ "Standard Dargwa",
                              TRUE ~ language),
         aff_col = case_when(language == "Eastern Armenian" ~ "black",
                             language == "Juhuri" ~ "black",
                             language == "Azerbaijani" ~ "black",
                             language == "Kumyk" ~ "black",
                             language == "Nogai" ~ "black",
                             TRUE ~ aff_col))  ->
  colors
```

```{r}
df |> 
  distinct(source) |> 
  nrow() ->
  chapters

df |> 
  distinct(value_name) |> 
  nrow() ->
  features

df |> 
  distinct(language, idiom) |> 
  nrow() ->
  idioms

df |> 
  distinct(language) |> 
  nrow() ->
  languages
```

There are `r chapters` chapters by 23 researchres that introduce `r features` features that covers `r idioms` distinct idioms from `r languages` languages.

```{r}
df |> 
  left_join(language_idiom_sample) |> 
  filter(!is.na(languageuage_sample),
         value_name %in% features_sample) |> 
  distinct(value_name) |> 
  nrow() ->
  features_filtered

df |> 
  left_join(language_idiom_sample) |> 
  filter(!is.na(languageuage_sample),
         value_name %in% features_sample) |> 
  distinct(language, idiom) |> 
  nrow() ->
  idioms_filtered

df |> 
  left_join(language_idiom_sample) |> 
  filter(!is.na(languageuage_sample),
         value_name %in% features_sample) |> 
  distinct(language) |> 
  nrow() ->
  languages_filtered
```

After filtering there are `r features_filtered` features that covers `r idioms_filtered` distinct idioms from `r languages_filtered` languages.


```{r}
df |> 
  left_join(language_idiom_sample) |> 
  filter(!is.na(languageuage_sample),
         value_name %in% features_sample) |> 
  select(-languageuage_sample, -type, -source) |> 
  group_by(language, idiom, value_name) |> 
  slice_sample(n = 1) |> 
  ungroup() |> 
  mutate(language = case_when(language == "Southwestern Dargwa" ~ "Tanti",
                              language == "North-Central Dargwa" ~ "Standard Dargwa",
                              TRUE ~ language)) |> 
  left_join(colors) |> 
  pivot_wider(names_from = value_name, values_from = value) ->
  for_sampling
```

```{r sampling}
#| cache: true

map(1:300, .progress = FALSE, 
    function(i){
  for_sampling |> 
    pivot_longer(names_to = "feature", values_to = "value", -c(language, idiom)) |> 
    group_by(feature, language) |> 
    sample_n(size = 1) |> 
    ungroup() |> 
    mutate(merged_value = str_c(feature, value)) |> 
    pairwise_count(language, merged_value) |> 
    mutate(ratio = 1 - n/length(unique(df$value_name))) |> 
    select(-n)  |>
    pivot_wider(names_from = item2, values_from = ratio) |> 
    arrange(item1) |> 
    column_to_rownames("item1") |> 
    as.dist() |> 
    nj() 
}) ->
  trees

S3Class(trees) <- "multiPhylo"
```


```{r}
my_cons_net <- consensusNet(trees, prob = 0.1)
plot(my_cons_net,
     sub = "0.1",
     tip.color = colors$aff_col[match(my_cons_net$tip.label, colors$language)],
     use.edge.length = TRUE,
     show.tip.label = TRUE,
     edge.width = 3,
     cex=0.9,
     direction = "axial")

my_cons_net <- consensusNet(trees, prob = 0.2)
plot(my_cons_net,
     sub = "0.2",
     tip.color = colors$aff_col[match(my_cons_net$tip.label, colors$language)],
     use.edge.length = TRUE,
     show.tip.label = TRUE,
     edge.width = 3,
     cex=0.9,
     direction = "axial")

my_cons_net <- consensusNet(trees, prob = 0.3)
plot(my_cons_net,
     sub = "0.3",
     tip.color = colors$aff_col[match(my_cons_net$tip.label, colors$language)],
     use.edge.length = TRUE,
     show.tip.label = TRUE,
     edge.width = 3,
     cex=0.9,
     direction = "axial")

my_cons_net <- consensusNet(trees, prob = 0.4)
plot(my_cons_net,
     sub = "0.4",
     tip.color = colors$aff_col[match(my_cons_net$tip.label, colors$language)],
     use.edge.length = TRUE,
     show.tip.label = TRUE,
     edge.width = 3,
     cex=0.9,
     direction = "axial")

my_cons_net <- consensusNet(trees, prob = 0.5)
plot(my_cons_net,
     sub = "0.5",
     tip.color = colors$aff_col[match(my_cons_net$tip.label, colors$language)],
     use.edge.length = TRUE,
     show.tip.label = TRUE,
     edge.width = 3,
     cex=0.9,
     direction = "axial")

my_cons_net <- consensusNet(trees, prob = 0.6)
plot(my_cons_net,
     sub = "0.6",
     tip.color = colors$aff_col[match(my_cons_net$tip.label, colors$language)],
     use.edge.length = TRUE,
     show.tip.label = TRUE,
     edge.width = 3,
     cex=0.9,
     direction = "axial")

my_cons_net <- consensusNet(trees, prob = 0.7)
plot(my_cons_net,
     sub = "0.7",
     tip.color = colors$aff_col[match(my_cons_net$tip.label, colors$language)],
     use.edge.length = TRUE,
     show.tip.label = TRUE,
     edge.width = 3,
     cex=0.9,
     direction = "axial")

my_cons_net <- consensusNet(trees, prob = 0.8)
plot(my_cons_net,
     sub = "0.8",
     tip.color = colors$aff_col[match(my_cons_net$tip.label, colors$language)],
     use.edge.length = TRUE,
     show.tip.label = TRUE,
     edge.width = 3,
     cex=0.9,
     direction = "axial")

my_cons_net <- consensusNet(trees, prob = 0.9)
plot(my_cons_net,
     sub = "0.9",
     tip.color = colors$aff_col[match(my_cons_net$tip.label, colors$language)],
     use.edge.length = TRUE,
     show.tip.label = TRUE,
     edge.width = 3,
     cex=0.9,
     direction = "axial")
```

